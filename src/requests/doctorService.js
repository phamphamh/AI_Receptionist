const fs = require('fs');
const path = require('path');

// Charger la base de donn√©es des m√©decins
const filePath = path.join(__dirname, '../fake_doctors.json');
const doctorsData = JSON.parse(fs.readFileSync(filePath, 'utf8'));

// Fonction pour v√©rifier la disponibilit√© d'un m√©decin avec sp√©cialit√©
function isDoctorAvailable(doctorName, city, date, specialty) {
    let doctorData = doctorsData.find(d => d.name === doctorName && d.city === city && d.specialty === specialty);
    return doctorData && doctorData.slots.includes(date);
}

// Test simple pour la disponibilit√© d'un m√©decin
const testIsDoctorAvailable = () => {
    const doctorName = 'Marie Simon';
    const city = 'Paris';
    const dateToTest = '2025-03-17T10:00:00';
    const specialty = 'Cardiologue';

    const result = isDoctorAvailable(doctorName, city, dateToTest, specialty);
    console.log('üîé Test de disponibilit√© du m√©decin:');
    console.log(`üë©‚Äç‚öïÔ∏è M√©decin: ${doctorName} | üèôÔ∏è Ville: ${city} | ü©∫ Sp√©cialit√©: ${specialty}`);
    console.log(`üìÖ Date: ${new Date(dateToTest).toLocaleString('fr-FR', { 
        weekday: 'long', 
        year: 'numeric', 
        month: 'long', 
        day: 'numeric', 
        hour: '2-digit', 
        minute: '2-digit' 
    })}\n`);

    if (result) {
        console.log('‚úÖ Le m√©decin est disponible √† cette date.');
    } else {
        console.log('‚ùå Le m√©decin n\'est pas disponible √† cette date.');
    }
};

// Fonction pour trouver des m√©decins alternatifs dans la m√™me ville et sp√©cialit√©
function findAlternativeAppointments(doctorName, city, date, specialty) {
    let availableDoctors = doctorsData.filter(d => 
        d.name !== doctorName && 
        d.city === city && 
        d.specialty === specialty && 
        d.slots.includes(date)
    );
    return availableDoctors.length > 0 ? availableDoctors : null;
}

// Test pour trouver des m√©decins alternatifs
const testFindAlternativeAppointments = () => {
    const doctorName = 'Marie Simon';
    const city = 'Paris';
    const dateToTest = '2025-03-30T16:59:00';
    const specialty = 'Cardiologue';

    const result = findAlternativeAppointments(doctorName, city, dateToTest, specialty);
    console.log('üîé Test de m√©decins alternatifs:');
    console.log(`üèôÔ∏è Ville: ${city} | ü©∫ Sp√©cialit√©: ${specialty}`);
    console.log(`üìÖ Date: ${new Date(dateToTest).toLocaleString('fr-FR', { 
        weekday: 'long', 
        year: 'numeric', 
        month: 'long', 
        day: 'numeric', 
        hour: '2-digit', 
        minute: '2-digit' 
    })}\n`);

    if (result && result.length > 0) {
        console.log('‚úÖ M√©decins alternatifs trouv√©s:');
        result.forEach(doctor => {
            console.log(`üë©‚Äç‚öïÔ∏è Dr. ${doctor.name}`);
            console.log('üìÜ Disponibilit√©s:');
            doctor.slots.forEach(slot => {
                console.log(`  - ${new Date(slot).toLocaleString('fr-FR', { 
                    weekday: 'long', 
                    year: 'numeric', 
                    month: 'long', 
                    day: 'numeric', 
                    hour: '2-digit', 
                    minute: '2-digit' 
                })}`);
            });
        });
    } else {
        console.log('‚ùå Aucun m√©decin alternatif trouv√©.');
    }
};

// Fonction pour trouver des m√©decins dans une ville voisine avec la m√™me sp√©cialit√©
function findDoctorsInNearbyCities(doctorName, city, date, specialty) {
    let availableDoctors = doctorsData.filter(d => 
        d.name !== doctorName && 
        d.city !== city && 
        d.specialty === specialty && 
        d.slots.includes(date)
    );
    return availableDoctors.length > 0 ? availableDoctors : null;
}

// Test pour trouver des m√©decins dans des villes voisines
const testFindDoctorsInNearbyCities = () => {
    const doctorName = 'Marie Simon';
    const city = 'Paris';
    const dateToTest = '2025-03-17T10:00:00';
    const specialty = 'Cardiologue';

    const result = findDoctorsInNearbyCities(doctorName, city, dateToTest, specialty);
    console.log('üîé Test de m√©decins dans des villes voisines:\n');
    console.log(`üìç Ville actuelle: ${city} | ü©∫ Sp√©cialit√©: ${specialty}`);
    console.log(`üìÖ Date: ${dateToTest}\n`);

    if (result && result.length > 0) {
        console.log('‚úÖ M√©decins trouv√©s dans des villes voisines:');
        result.forEach(doctor => {
            console.log(`\nüë©‚Äç‚öïÔ∏è Dr. ${doctor.name} | üìç Ville: ${doctor.city}`);
            console.log('üìÜ Disponibilit√©s:');
            doctor.slots.forEach(slot => {
                console.log(`  - ${new Date(slot).toLocaleString('fr-FR', { 
                    weekday: 'long', 
                    year: 'numeric', 
                    month: 'long', 
                    day: 'numeric', 
                    hour: '2-digit', 
                    minute: '2-digit' 
                })}`);
            });
        });
    } else {
        console.log('‚ùå Aucun m√©decin trouv√© dans des villes voisines.');
    }
};

// Lancer les tests : node doctorService.js
testIsDoctorAvailable();
testFindAlternativeAppointments();
testFindDoctorsInNearbyCities();

module.exports = { 
    isDoctorAvailable,
    findAlternativeAppointments,
    findDoctorsInNearbyCities
};
